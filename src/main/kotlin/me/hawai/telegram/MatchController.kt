package me.hawai.telegram

import eu.vendeli.tgbot.TelegramBot
import eu.vendeli.tgbot.annotations.CommandHandler
import eu.vendeli.tgbot.api.answer.answerCallbackQuery
import eu.vendeli.tgbot.api.message.editMessageText
import eu.vendeli.tgbot.api.message.message
import eu.vendeli.tgbot.types.User
import eu.vendeli.tgbot.types.internal.CallbackQueryUpdate
import me.hawai.inject.telegramApi
import me.hawai.service.FormViewService
import me.hawai.service.MatchingScoreService
import me.hawai.service.UserService
import org.koin.core.component.get

@CommandHandler(["/match"])
suspend fun matchCommand(tgUser: User, bot: TelegramBot) {
    message { "‚¨á\uFE0F –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–∂–∏—Ç–µ–ª–µ–π:" }.inlineKeyboardMarkup {
        callbackData("\uD83D\uDE46\u200D‚ôÇ\uFE0F –¢–≤–æ–∏ —Å–æ–∂–∏—Ç–µ–ª–∏") { "match?page=0" }
    }.send(tgUser, bot)
}

@CommandHandler.CallbackQuery(["match"])
suspend fun match(
    tgUser: User, bot: TelegramBot, update: CallbackQueryUpdate
) = telegramApi {
    answerCallbackQuery(update.callbackQuery.id).send(tgUser, bot)

    val userService = get<UserService>()
    val matchService = get<MatchingScoreService>()
    val formViewService = get<FormViewService>()

    val fromMessageId = update.callbackQuery.message?.messageId
    if (fromMessageId == null) return@telegramApi

    val user = userService.getUser(tgUser.id) ?: return@telegramApi
    val scores = matchService.getSortedScores(user.id)
    val sortedUsers = scores.map {
        if (it.firstUser == user.id) it.secondUser
        else it.firstUser
    }.filter {
        formViewService.getFormView(user.id, it) == null
    }

    if (sortedUsers.isEmpty()) {
        message { "\uD83E\uDD72 –¢—ã —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª –≤—Å–µ –∞–Ω–∫–µ—Ç—ã! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ..." }.send(tgUser, bot)
        return@telegramApi
    }

    val matchedUserId = sortedUsers.first()
    val matchedUser = userService.getUserById(matchedUserId) ?: return@telegramApi

    formViewService.markAsViewed(user.id, matchedUserId)

    editMessageText(fromMessageId) {
        """
‚òòÔ∏è –í–æ—Ç —Ç–≤–æ–π –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–æ–∂–∏—Ç–µ–ª—å:

${matchedUser.asView()}
""".trimIndent()
    }.inlineKeyboardMarkup {
        callbackData("‚ù§\uFE0F –ù—Ä–∞–≤–∏—Ç—Å—è") { "like?id=${matchedUser.telegramId}" }
        br()
        callbackData("‚Ü™\uFE0F –°–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç") { "match" }
    }.send(tgUser, bot)
}

@CommandHandler.CallbackQuery(["like"])
suspend fun like(id: String, tgUser: User, bot: TelegramBot, update: CallbackQueryUpdate) = telegramApi {
    answerCallbackQuery(update.callbackQuery.id).send(tgUser, bot)

    val userService = get<UserService>()
    val formViewService = get<FormViewService>()

    val fromMessageId = update.callbackQuery.message?.messageId
    if (fromMessageId == null) return@telegramApi

    val user = userService.getUser(tgUser.id) ?: return@telegramApi
    val matchedUser = userService.getUser(id.toLong()) ?: return@telegramApi

    formViewService.markAsLiked(user.id, matchedUser.id)

    editMessageText(fromMessageId) {
        """
ü©∑ –¢—ã –ª–∞–π–∫–Ω—É–ª —Å–≤–æ–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ–∂–∏—Ç–µ–ª—è:

${matchedUser.asView()}
""".trimIndent()
    }.inlineKeyboardMarkup {
        callbackData("‚Ü™\uFE0F –°–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç") { "match" }
    }.send(tgUser, bot)

    val anotherFormView = formViewService.getFormView(matchedUser.id, user.id)
    val wasNotBothLike = anotherFormView == null || !anotherFormView.liked
    val startMessage = if (wasNotBothLike) {
        "\uD83D\uDD14 –î–∑—ã–Ω—å-–¥–∑—ã–Ω—å! –¢–≤–æ—é –∞–Ω–∫–µ—Ç—É –ª–∞–π–∫–Ω—É–ª @${tgUser.username}."
    } else {
        "\uD83D\uDC20 –ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫!"
    }

    message {
        """
$startMessage

${user.asView()}
        """.trimIndent()
    }.inlineKeyboardMarkup {
        if (wasNotBothLike) {
            callbackData("‚ù§\uFE0F –ù—Ä–∞–≤–∏—Ç—Å—è") { "like?id=${user.telegramId}" }
            br()
            callbackData("\uD83D\uDEAB –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å") { "start-callback" }
        }
    }.send(matchedUser.telegramId, bot)

}